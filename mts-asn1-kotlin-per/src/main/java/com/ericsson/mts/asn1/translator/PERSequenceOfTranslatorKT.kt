// SPDX-License-Identifier: MIT
/*
 * Copyright 2019 Ericsson, https://www.ericsson.com/en
 * Copyright 2024 Andrea Mennillo, https://amennillo.eu
 */
package com.ericsson.mts.asn1.translator

import com.ericsson.mts.asn1.*
import com.ericsson.mts.asn1.factory.FormatReader
import com.ericsson.mts.asn1.factory.FormatWriter
import com.ericsson.mts.asn1.util.UNIT_64K
import com.ericsson.mts.asn1.util.getIntBounds

class PERSequenceOfTranslatorKT(private val perTranscoder: PERTranscoderKT) : AbstractSequenceOfTranslator() {
    @Throws(Exception::class)
    override fun doEncode(s: BitArray, reader: FormatReader, numberOfComponents: Int, registry: Map<String, String>) {
        logger.trace("{} : {}", this.name, this)

        var (lb, ub) = constraints.getIntBounds()
        var ubUnset = ub >= UNIT_64K

        if (constraints.hasSizeConstraint() && constraints.isExtensible) {
            // X.691 : clause 20.4
            if (numberOfComponents < lb || numberOfComponents > ub) {
                s.writeBit(1)
                // invoke 20.6 ub unset
                lb = 0
                ub = Int.MAX_VALUE
                ubUnset = true
            } else {
                s.writeBit(0)
            }
        }

        if (lb == ub && ub < UNIT_64K) {
            // X.691 : clause 20.5
            launchEncode(s, reader, registry, ub)
        } else {
            // X.691 : clause 20.6
            if (ubUnset) {
                perTranscoder.encodeUnconstrainedLengthDeterminant(s, numberOfComponents)
            } else {
                perTranscoder.encodeConstrainedInteger(
                    s,
                    numberOfComponents.toBigInteger(),
                    lb.toBigInteger(),
                    ub.toBigInteger()
                )
            }
            launchEncode(s, reader, registry, numberOfComponents)
        }
    }

    @Throws(Exception::class)
    private fun launchEncode(
        s: BitArray,
        reader: FormatReader,
        registry: Map<String, String>,
        numberOfComponents: Int
    ) {
        val parameters = typeTranslator.getParameters()
        val inputParameters: MutableList<String?> = ArrayList()
        if (parameters.isEmpty()) {
            for (i in 0 until numberOfComponents) {
                typeTranslator.encode(null, s, reader, null)
            }
        } else {
            for (parameter in actualParameters) {
                inputParameters.add(registry[parameter])
            }
            for (i in 0 until numberOfComponents) {
                typeTranslator.encode(null, s, reader, null, inputParameters)
            }
        }
    }

    @Throws(Exception::class)
    public override fun doDecode(s: BitInputStream, writer: FormatWriter, registry: Map<String, String>) {
        logger.trace("Enter {} translator, name {}", this.javaClass.simpleName, this.name)
        var (lb, ub) = constraints.getIntBounds()
        var ubUnset = ub >= UNIT_64K

        if (constraints.hasSizeConstraint() && constraints.isExtensible) {
            // X.691 : clause 20.4
            val isExtended = 1 == s.readBit()
            if (isExtended) {
                // invoke 20.6 ub unset
                lb = 0
                ub = Int.MAX_VALUE
                ubUnset = true
            }
        }

        if (lb == ub && ub < UNIT_64K) {
            /* X.691 : clause 20.5
            If the number of components is fixed ("ub" equals "lb") and "ub" is less than 64K, then there shall be no
            length determinant for the sequence-of, and the fields of each component shall be appended in turn to the
            field-list of the sequence-of.
             */
            launchDecode(s, writer, registry, ub)
        } else {
            /* If there is no finite maximum or "ub" is greater than or equal to 64K we say that "ub" is unset */
            /* X.691 : clause 20.6
            Otherwise, the procedures of 11.9 shall be invoked to add the list of fields generated by the "n" components
            to the field-list, preceded by a length determinant equal to "n" components as a constrained whole number
            if "ub" is set, and as a semi-constrained whole number if "ub" is unset. "lb" is as determined above.
            */
            val n = if (ubUnset) {
                perTranscoder.decodeUnconstrainedLengthDeterminant(s).toBigInteger()
            } else {
                perTranscoder.decodeConstrainedInteger(lb.toBigInteger(), ub.toBigInteger(), s)
            }
            launchDecode(s, writer, registry, n.intValueExact())
        }
    }

    @Throws(Exception::class)
    private fun launchDecode(s: BitInputStream, writer: FormatWriter, registry: Map<String, String>, ub: Int) {
        val parameters = typeTranslator.getParameters()
        val inputParameters: MutableList<String?> = ArrayList()
        if (parameters.isEmpty()) {
            for (i in 0 until ub) {
                typeTranslator.decode(null, s, writer, null)
            }
        } else {
            for (parameter in actualParameters) {
                inputParameters.add(registry[parameter])
            }
            for (i in 0 until ub) {
                typeTranslator.decode(null, s, writer, null, inputParameters)
            }
        }
    }
}
